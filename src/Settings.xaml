<local:BaseSaveStateWindow  xmlns:local="clr-namespace:EQTool" 
        x:Class="EQTool.Settings"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:properties="clr-namespace:EQTool.Properties" 
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        Style="{StaticResource MySettingsWindowSyle}"
        mc:Ignorable="d"
        SizeToContent="WidthAndHeight"
        Title="Settings">
    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    </Window.Resources>
    <TabControl>
        <TabItem Header="General">
            <StackPanel Orientation="Vertical" Margin="5, 5, 5, 5">
                <StackPanel Orientation="Vertical" Visibility="{Binding MissingConfiguration, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}">
                    <TextBlock Text="Configuration missing!" FontWeight="Bold" FontSize="20" Foreground="Red"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Eq Path"  VerticalAlignment="Center"  FontWeight="Bold"  MinWidth="100" Foreground="Red" Visibility="{Binding DoesNotHaveEqPath, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}"/>
                    <TextBlock Text="Eq Path"  VerticalAlignment="Center"  FontWeight="Bold"  MinWidth="100" Foreground="Green" Visibility="{Binding HasEqPath, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Visible}"/>
                    <StackPanel Orientation="Horizontal" >
                        <TextBlock Text="{Binding EqPath}" HorizontalAlignment="Left"/>
                        <Button Margin="5,0,0,0" HorizontalAlignment="Right" Click="EqFolderButtonClicked">
                            <StackPanel Orientation="Horizontal">
                                <TextBlock>Browse</TextBlock>
                                <Image Source="pack://application:,,,/open-folder.png" Height="{DynamicResource GlobalFontSize}" Margin="5,0,0,0" ></Image>
                            </StackPanel>
                        </Button>
                    </StackPanel>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Eq Log Path"  VerticalAlignment="Center"  FontWeight="Bold" MinWidth="100" Foreground="Red" Visibility="{Binding DoesNotHaveEqPath, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}"/>
                    <TextBlock Text="Eq Log Path"   VerticalAlignment="Center"  FontWeight="Bold" MinWidth="100" Foreground="Green" Visibility="{Binding HasEqPath, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Visible}"/>
                    <TextBlock Text="{Binding EqLogPath}" HorizontalAlignment="Left" MinWidth="150"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal"  Visibility="{Binding HasEqPath, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Visible}" >
                    <TextBlock Text="Logging"  VerticalAlignment="Center"  FontWeight="Bold"  MinWidth="100" Visibility="{Binding IsLoggingEnabled, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}"/>
                    <TextBlock Text="Logging"  VerticalAlignment="Center"  FontWeight="Bold"  MinWidth="100" Foreground="Red"  Visibility="{Binding IsLoggingDisabled, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Visible}"/>
                    <TextBlock Visibility="{Binding IsLoggingEnabled, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}" Text="Logging Enabled!" Margin="5,5,0,0" HorizontalAlignment="Left" Foreground="Green"/>
                    <Button Visibility="{Binding IsLoggingDisabled, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}" Name="enableLogging" Margin="5,5,0,0" Click="enableLogging_Click">Enable Logging</Button>
                </StackPanel>
                <StackPanel Orientation="Horizontal" Visibility="{Binding IsLoggingDisabled, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}"  >
                    <TextBlock HorizontalAlignment="Center" Text="You must enable loogging!"  FontWeight="Bold" Foreground="Red"/>
                </StackPanel>
                <StackPanel Orientation="Vertical" HorizontalAlignment="Stretch" Visibility="{Binding NotMissingConfiguration, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Visible}">
                    <TextBlock Visibility="{Binding HasNoCharName}" HorizontalAlignment="Center" Text="Functionality disabled until you log in!"  FontWeight="Bold" Foreground="Red"/>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Character" VerticalAlignment="Center"  FontWeight="Bold"  MinWidth="100"/>
                        <TextBlock Text="{Binding ActivePlayer.Player.Name}" />
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Guild" VerticalAlignment="Center"  FontWeight="Bold" MinWidth="100"/>
                        <TextBlock Text="{Binding ActivePlayer.Player.GuildName}" />
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Class" VerticalAlignment="Center"  FontWeight="Bold" MinWidth="100"/>
                        <ComboBox IsEnabled="{Binding HasCharName}" SelectedItem="{Binding ActivePlayer.Player.PlayerClass}" ItemsSource="{Binding PlayerClasses}" MinWidth="150"></ComboBox>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Track Skill" VerticalAlignment="Center"  FontWeight="Bold" MinWidth="100"/>
                        <ComboBox IsEnabled="{Binding ActivePlayer.Player.IsTrackableClass}" SelectedItem="{Binding ActivePlayer.Player.TrackingSkill}" ItemsSource="{Binding TrackSkills}" MinWidth="150"></ComboBox>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Zone" FontWeight="Bold" VerticalAlignment="Center" MinWidth="100"/>
                        <ComboBox IsEnabled="{Binding HasCharName}" SelectedItem="{Binding ActivePlayer.Player.Zone}" ItemsSource="{Binding Zones}"  SelectionChanged="zoneselectionchanged" MinWidth="150"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Your Level"  FontWeight="Bold" VerticalAlignment="Center" MinWidth="100"/>
                        <ComboBox  IsEnabled="{Binding HasCharName}" SelectedItem="{Binding ActivePlayer.Player.Level}" ItemsSource="{Binding Levels}" MinWidth="150"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Font Size"  FontWeight="Bold"  VerticalAlignment="Center" MinWidth="100"/>
                        <ComboBox  SelectedItem="{Binding GlobalFontSize}" ItemsSource="{Binding FontSizes}" SelectionChanged="SaveSettings" MinWidth="150"/>
                    </StackPanel>
                    <Separator/>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Locked Character" VerticalAlignment="Center"  FontWeight="Bold"  MinWidth="100"/>
                        <ComboBox  SelectedItem="{Binding SelectedCharacter}" ItemsSource="{Binding AvailableCharacters}" SelectionChanged="SaveSettings" MinWidth="150"/>
                    </StackPanel>
                    <Separator/>
                    <!--<StackPanel Orientation="Horizontal" Margin="0,2,0,0">
                        <TextBlock Text="Enable Zeal" VerticalAlignment="Center"  FontWeight="Bold"  MinWidth="100"/>
                        <CheckBox IsChecked="{Binding ZealEnabled}" Click="SaveAlwaysOntopCheckBoxSettings" ></CheckBox>
                    </StackPanel>
                    <Separator Margin="0,10,0,0"/>-->
                    <TextBlock Text="Damage Window" HorizontalAlignment="Center" FontWeight="Bold" Margin="5,5,0,0"/>
                    <StackPanel Orientation="Vertical" Margin="0, 0, 0, 8">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Always on top" VerticalAlignment="Center"  FontWeight="Bold"  MinWidth="100"/>
                            <CheckBox IsChecked="{Binding DpsAlwaysOnTop}" Click="SaveAlwaysOntopCheckBoxSettings" ></CheckBox>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Window Opacity"  VerticalAlignment="Center"  FontWeight="Bold"  MinWidth="100"/>
                            <Slider Value="{Binding DPSWindowOpacity}" Minimum=".01" Maximum="1" SmallChange=".1" TickFrequency=".1" ValueChanged="SaveSettings" MinWidth="150"/>
                        </StackPanel>
                    </StackPanel>
                    <Separator/>
                    <TextBlock Text="Mob Window" HorizontalAlignment="Center" FontWeight="Bold" Margin="5,5,0,0"/>
                    <StackPanel Orientation="Vertical" Margin="0, 0, 0, 8">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Always on top" VerticalAlignment="Center"  FontWeight="Bold"  MinWidth="100"/>
                            <CheckBox IsChecked="{Binding MobAlwaysOnTop}" Click="SaveAlwaysOntopCheckBoxSettings" ></CheckBox>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Update Via Zeal" VerticalAlignment="Center"  FontWeight="Bold"  MinWidth="100"/>
                            <CheckBox IsChecked="{Binding ZealMobInfo_AutoUpdate}" Click="SaveSettings" ></CheckBox>
                        </StackPanel>
                        <!--<StackPanel Orientation="Horizontal">
                            <TextBlock Text="Window Opacity"  VerticalAlignment="Center"  FontWeight="Bold"  MinWidth="100"/>
                            <Slider Value="{Binding MobWindowOpacity}" Minimum=".01" Maximum="1" SmallChange=".1" TickFrequency=".1" ValueChanged="SaveSettings" MinWidth="150"/>
                        </StackPanel>-->
                    </StackPanel>
                </StackPanel>
            </StackPanel>
        </TabItem>
        <TabItem Header="Triggers">
            <StackPanel Orientation="Vertical" Margin="5, 5, 5, 5">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Installed Voices" VerticalAlignment="Center"  FontWeight="Bold" MinWidth="100"/>
                    <ComboBox SelectedItem="{Binding SelectedVoice}" ItemsSource="{Binding InstalledVoices}" MinWidth="105"></ComboBox>
                    <Button Content="▶" Margin="1" FontSize="7" Width="14" Height="14" Padding="0" Click="textvoice" ToolTip="Test Voice" />
                </StackPanel>
                <StackPanel Orientation="Horizontal" Margin="0,5,0,0">
                    <TextBlock Text="Overlay Font Size" ToolTip="Example: GG or CA. Other tags will be ignored" VerticalAlignment="Center" FontWeight="Bold"  MinWidth="100"/>
                    <ComboBox SelectedItem="{Binding OverlayFontSize}" ItemsSource="{Binding FontSizes}" MinWidth="105"></ComboBox>
                </StackPanel>
                <StackPanel Orientation="Horizontal" Margin="0,5,0,0">
                    <TextBlock Text="Audio Volume"  VerticalAlignment="Center"  FontWeight="Bold"  MinWidth="100"/>
                    <Slider Value="{Binding AudioTriggerVolume}" ToolTip="{Binding AudioTriggerVolume}" Minimum="0" Maximum="100" SmallChange="1" TickFrequency="1" ValueChanged="SaveSettings" MinWidth="150"/>
                </StackPanel>
                <Separator/>
                <Expander ExpandDirection="Down" IsExpanded="False" Header="Pre-built Triggers" FontWeight="Bold">
                    <StackPanel Orientation="Vertical">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock VerticalAlignment="Center" FontWeight="Bold"  MinWidth="90"/>
                            <TextBlock Text="Visual" FontWeight="Bold"  MinWidth="95" Width="34"/>
                            <TextBlock Text="Audio" VerticalAlignment="Center" FontWeight="Bold"  />
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Enraged"  VerticalAlignment="Center" FontWeight="Bold"  MinWidth="100"/>
                            <CheckBox IsChecked="{Binding ActivePlayer.Player.EnrageOverlay}" Click="SaveSettings" MinWidth="20"></CheckBox>
                            <xctk:ColorPicker Name="EnrageOverlayColor" SelectedColor="{Binding EnrageOverlayColor}" SelectedColorChanged="OverlayColor_Selected" MinWidth="70" MaxWidth="70" Margin="0, 0, 5, 0" ></xctk:ColorPicker>
                            <CheckBox IsChecked="{Binding ActivePlayer.Player.EnrageAudio}" Click="SaveSettings" MinWidth="30"></CheckBox>
                            <Button Content="▶" Margin="1" FontSize="7" Width="14" Height="14" Padding="0" Click="testenrage" ToolTip="Test Enrage" />
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Levitate Fading" VerticalAlignment="Center" FontWeight="Bold"  MinWidth="100"/>
                            <CheckBox IsChecked="{Binding ActivePlayer.Player.LevFadingOverlay}" Click="SaveSettings" MinWidth="20"></CheckBox>
                            <xctk:ColorPicker Name="LevFadingOverlayColor" SelectedColor="{Binding LevFadingOverlayColor}" SelectedColorChanged="OverlayColor_Selected" MinWidth="70" MaxWidth="70" Margin="0, 0, 5, 0" ></xctk:ColorPicker>
                            <CheckBox IsChecked="{Binding ActivePlayer.Player.LevFadingAudio}" Click="SaveSettings" MinWidth="30"></CheckBox>
                            <Button Content="▶" Margin="1" FontSize="7" Width="14" Height="14" Padding="0" Click="testlevfading" ToolTip="Test Levitate fading" />
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Invis Fading" VerticalAlignment="Center" FontWeight="Bold"  MinWidth="100"/>
                            <CheckBox IsChecked="{Binding ActivePlayer.Player.InvisFadingOverlay}" Click="SaveSettings" MinWidth="20"></CheckBox>
                            <xctk:ColorPicker Name="InvisFadingOverlayColor" SelectedColor="{Binding InvisFadingOverlayColor}" SelectedColorChanged="OverlayColor_Selected" MinWidth="70" MaxWidth="70" Margin="0, 0, 5, 0" ></xctk:ColorPicker>
                            <CheckBox IsChecked="{Binding ActivePlayer.Player.InvisFadingAudio}" Click="SaveSettings" MinWidth="30"></CheckBox>
                            <Button Content="▶" Margin="1" FontSize="7" Width="14" Height="14" Padding="0" Click="testinvisfading" ToolTip="Test Invis Fading" />
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="FTE" VerticalAlignment="Center" FontWeight="Bold"  MinWidth="100"/>
                            <CheckBox IsChecked="{Binding ActivePlayer.Player.FTEOverlay}" Click="SaveSettings" MinWidth="20"></CheckBox>
                            <xctk:ColorPicker Name="FTEOverlayColor" SelectedColor="{Binding FTEOverlayColor}" SelectedColorChanged="OverlayColor_Selected" MinWidth="70" MaxWidth="70" Margin="0, 0, 5, 0" ></xctk:ColorPicker>
                            <CheckBox IsChecked="{Binding ActivePlayer.Player.FTEAudio}" Click="SaveSettings" MinWidth="30"></CheckBox>
                            <Button Content="▶" Margin="1" FontSize="7" Width="14" Height="14" Padding="0" Click="testFTE" ToolTip="Test FTE" />
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Charm Break" VerticalAlignment="Center" FontWeight="Bold"  MinWidth="100"/>
                            <CheckBox IsChecked="{Binding ActivePlayer.Player.CharmBreakOverlay}" Click="SaveSettings" MinWidth="20"></CheckBox>
                            <xctk:ColorPicker Name="CharmBreakOverlayColor" SelectedColor="{Binding CharmBreakOverlayColor}" SelectedColorChanged="OverlayColor_Selected" MinWidth="70" MaxWidth="70" Margin="0, 0, 5, 0" ></xctk:ColorPicker>
                            <CheckBox IsChecked="{Binding ActivePlayer.Player.CharmBreakAudio}" Click="SaveSettings" MinWidth="30"></CheckBox>
                            <Button Content="▶" Margin="1" FontSize="7" Width="14" Height="14" Padding="0" Click="testCharmBreak" ToolTip="Test Charm Break" />
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Failed Feign" VerticalAlignment="Center" FontWeight="Bold"  MinWidth="100"/>
                            <CheckBox IsChecked="{Binding ActivePlayer.Player.FailedFeignOverlay}" Click="SaveSettings" MinWidth="20"></CheckBox>
                            <xctk:ColorPicker Name="FailedFeignOverlayColor" SelectedColor="{Binding FailedFeignOverlayColor}" SelectedColorChanged="OverlayColor_Selected" MinWidth="70" MaxWidth="70" Margin="0, 0, 5, 0" ></xctk:ColorPicker>
                            <CheckBox IsChecked="{Binding ActivePlayer.Player.FailedFeignAudio}" Click="SaveSettings" MinWidth="30"></CheckBox>
                            <Button Content="▶" Margin="1" FontSize="7" Width="14" Height="14" Padding="0" Click="testFailedFeign" ToolTip="Test Failed Feign" />
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Group Invite" VerticalAlignment="Center" FontWeight="Bold"  MinWidth="100"/>
                            <CheckBox IsChecked="{Binding ActivePlayer.Player.GroupInviteOverlay}" Click="SaveSettings" MinWidth="20"></CheckBox>
                            <xctk:ColorPicker Name="GroupInviteOverlayColor" SelectedColor="{Binding GroupInviteOverlayColor}" SelectedColorChanged="OverlayColor_Selected" MinWidth="70" MaxWidth="70" Margin="0, 0, 5, 0" ></xctk:ColorPicker>
                            <CheckBox IsChecked="{Binding ActivePlayer.Player.GroupInviteAudio}" Click="SaveSettings" MinWidth="30"></CheckBox>
                            <Button Content="▶" Margin="1" FontSize="7" Width="14" Height="14" Padding="0" Click="testGroupInvite" ToolTip="Test Group Invite" />
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Dragon Roar" VerticalAlignment="Center" FontWeight="Bold"  MinWidth="100"/>
                            <CheckBox IsChecked="{Binding ActivePlayer.Player.DragonRoarOverlay}" Click="SaveSettings" MinWidth="20"></CheckBox>
                            <xctk:ColorPicker Name="DragonRoarOverlayColor" SelectedColor="{Binding DragonRoarOverlayColor}" SelectedColorChanged="OverlayColor_Selected" MinWidth="70" MaxWidth="70" Margin="0, 0, 5, 0" ></xctk:ColorPicker>
                            <CheckBox IsChecked="{Binding ActivePlayer.Player.DragonRoarAudio}" Click="SaveSettings" MinWidth="30"></CheckBox>
                            <Button Content="▶" Margin="1" FontSize="7" Width="14" Height="14" Padding="0" Click="testDragonRoar" ToolTip="Test Dragon Roar" />
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Root Breaks" VerticalAlignment="Center" FontWeight="Bold"  MinWidth="100"/>
                            <CheckBox IsChecked="{Binding ActivePlayer.Player.RootWarningOverlay}" Click="SaveSettings" MinWidth="20"></CheckBox>
                            <xctk:ColorPicker Name="RootWarningOverlayColor" SelectedColor="{Binding RootWarningOverlayColor}" SelectedColorChanged="OverlayColor_Selected" MinWidth="70" MaxWidth="70" Margin="0, 0, 5, 0" ></xctk:ColorPicker>
                            <CheckBox IsChecked="{Binding ActivePlayer.Player.RootWarningAudio}" Click="SaveSettings" MinWidth="30"></CheckBox>
                            <Button Content="▶" Margin="1" FontSize="7" Width="14" Height="14" Padding="0" Click="testRootBreak" ToolTip="Test Root Break" />
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Resists" VerticalAlignment="Center" FontWeight="Bold"  MinWidth="100"/>
                            <CheckBox IsChecked="{Binding ActivePlayer.Player.ResistWarningOverlay}" Click="SaveSettings" MinWidth="20"></CheckBox>
                            <xctk:ColorPicker Name="ResistWarningOverlayColor" SelectedColor="{Binding OverlayColor}" SelectedColorChanged="OverlayColor_Selected" MinWidth="70" MaxWidth="70" Margin="0, 0, 5, 0" ></xctk:ColorPicker>
                            <CheckBox IsChecked="{Binding ActivePlayer.Player.ResistWarningAudio}" Click="SaveSettings" MinWidth="30"></CheckBox>
                            <Button Content="▶" Margin="1" FontSize="7" Width="14" Height="14" Padding="0" Click="testResists" ToolTip="Test Resist" />
                        </StackPanel>
                    </StackPanel>
                </Expander>
                <Separator/>
                <Expander ExpandDirection="Down" IsExpanded="False" Header="Custom Triggers" FontWeight="Bold">
                    <StackPanel Orientation="Vertical">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="85"/>
                                <ColumnDefinition Width="35"/>
                                <ColumnDefinition Width="90"/>
                                <ColumnDefinition Width="45"/>
                                <ColumnDefinition Width="55"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Column="1">Visual</TextBlock>
                            <TextBlock Grid.Column="3" Margin="10,0,0,0">Audio</TextBlock>
                        </Grid>
                        <ListView ItemsSource="{Binding CustomOverlays}">
                            <ListView.ItemTemplate>
                                <DataTemplate x:Name="CustomOverlaysTemplate" DataType="local:CustomOverlay">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="85"/>
                                            <ColumnDefinition Width="35"/>
                                            <ColumnDefinition Width="90"/>
                                            <ColumnDefinition Width="30"/>
                                            <ColumnDefinition Width="60"/>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>
                                        <TextBlock Text="{Binding Name}" VerticalAlignment="Center" FontWeight="Bold"  MaxWidth="125" Grid.Column="0"/>
                                        <CheckBox IsChecked="{Binding IsEnabled}" Margin="5,4,5,0" Click="CustomOverlayVisual_Click" MinWidth="20" Grid.Column="1"/>
                                        <xctk:ColorPicker SelectedColor="{Binding Color}" IsEnabled="False" Width="85" Grid.Column="2"/>
                                        <CheckBox IsChecked="{Binding IsAudioEnabled}" Margin="10,4,5,0" Click="CustomOverlayAudio_Click" MinWidth="20" Grid.Column="3"/>
                                        <Button Click="Open_EditExistingCustomOverlay" HorizontalAlignment="Right" DataContext="{Binding ID}" Margin="10,0,0,0" Content="Edit" Width="50" Grid.Column="4"/>
                                        <Button Click="Delete_ExistingCustomOverlay" DataContext="{Binding ID}" Margin="10,0,0,0" Grid.Column="5">
                                            <TextBlock Foreground="Red">X</TextBlock>
                                        </Button>
                                    </Grid>

                                    <!--<StackPanel Orientation="Horizontal" Width="auto">-->
                                    <!--</StackPanel>-->
                                </DataTemplate>
                            </ListView.ItemTemplate>
                        </ListView>

                        <Separator/>
                        <ToggleButton x:Name="ToggleCreateNewButton" IsChecked="{Binding IsChecked}" Height="30" Width="150" HorizontalAlignment="Left">
                            <StackPanel>
                                <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center">
                                    <Run Text="Add New" />
                                </TextBlock>

                                <Popup Name="CreateNewOverlayPopup" IsOpen="{Binding IsChecked, ElementName=ToggleCreateNewButton}">
                                    <Border BorderThickness="0.1" Padding="0" Background="White">
                                        <StackPanel Background="White" Orientation="Vertical" Width="200" Margin="8">
                                            <StackPanel Orientation="Horizontal" Width="250">
                                                <TextBlock Text="Name" Width="85"></TextBlock>
                                                <TextBox Name="NewOverlay_Name" Width="165"></TextBox>
                                            </StackPanel>
                                            <StackPanel Orientation="Horizontal" Width="250">
                                                <TextBlock Text="Trigger" Width="85"></TextBlock>
                                                <TextBox Name="NewOverlay_Trigger" Width="165"></TextBox>
                                            </StackPanel>
                                            <StackPanel Orientation="Horizontal" Width="250">
                                                <TextBlock Text="Alt. Trigger" Width="85"></TextBlock>
                                                <TextBox Name="NewOverlay_AltTrigger" Width="165"></TextBox>
                                            </StackPanel>
                                            <StackPanel Orientation="Horizontal" Width="250">
                                                <TextBlock Text="Message" Width="85"></TextBlock>
                                                <TextBox Name="NewOverlay_Message" Width="165"></TextBox>
                                            </StackPanel>
                                            <StackPanel Orientation="Horizontal" Width="250">
                                                <TextBlock Text="Audio Message" Width="85"></TextBlock>
                                                <TextBox Name="NewOverlay_AudioMessage" Width="165"></TextBox>
                                            </StackPanel>
                                            <StackPanel Orientation="Horizontal" Width="250">
                                                <TextBlock Text="Color" Width="85"></TextBlock>
                                                <xctk:ColorPicker Name="NewOverlay_TriggerColor" Width="165" Margin="0, 0, 5, 0" ></xctk:ColorPicker>
                                            </StackPanel>
                                            <Separator/>
                                            <Button Height="20" Click="NewOverlay_Save">Save</Button>
                                        </StackPanel>
                                    </Border>
                                </Popup>
                            </StackPanel>
                        </ToggleButton>
                    </StackPanel>
                </Expander>
                <Separator/>
                <Expander ExpandDirection="Down" IsExpanded="False" Header="Complete Heal Triggers" FontWeight="Bold">
                    <StackPanel Orientation="Vertical">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Chain Formats" VerticalAlignment="Center" FontWeight="Bold" MinWidth="100"/>
                            <TextBlock>
                        <Hyperlink NavigateUri="https://github.com/smasherprog/EqTool/blob/main/README.md#ch-format-is-loosely-tag-position-ch-target" RequestNavigate="Hyperlink_RequestNavigate">Chain Help</Hyperlink>
                            </TextBlock>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="CH Chain" ToolTip="Complete Heal Overlay" VerticalAlignment="Center"  FontWeight="Bold" MinWidth="100"/>
                            <CheckBox IsChecked="{Binding ActivePlayer.Player.ChChainOverlay}" Click="SaveSettings" MinWidth="105"></CheckBox>
                            <Button Content="▶" Margin="1" FontSize="7" Width="14" Height="14" Padding="0" Click="testChChain" ToolTip="Test CH Chain" />
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="CH Chain Tag" ToolTip="Example: GG or CA. Other tags will be ignored" VerticalAlignment="Center" FontWeight="Bold"  MinWidth="100"/>
                            <TextBox Text="{Binding Path=ActivePlayer.Player.ChChainTagOverlay, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" MinWidth="40" TextChanged="SaveSettings"></TextBox>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Ch Warning" ToolTip="Ch Warning" VerticalAlignment="Center" FontWeight="Bold"  MinWidth="100"/>
                            <CheckBox IsChecked="{Binding ActivePlayer.Player.ChChainWarningOverlay}" Click="SaveSettings" MinWidth="75"></CheckBox>
                            <CheckBox IsChecked="{Binding ActivePlayer.Player.ChChainWarningAudio}" Click="SaveSettings" MinWidth="30"></CheckBox>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Above will warn you when its your turn to cast CH" Foreground="Red"/>
                        </StackPanel>
                    </StackPanel>
                </Expander>
                <Separator/>
                <StackPanel Orientation="Vertical" Margin="0, 0, 0, 8">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Always on top" VerticalAlignment="Center"  FontWeight="Bold"  MinWidth="100"/>
                        <CheckBox IsChecked="{Binding OverlayAlwaysOnTop}" Click="SaveAlwaysOntopCheckBoxSettings" ></CheckBox>
                    </StackPanel>
                </StackPanel>
            </StackPanel>
        </TabItem>
        <TabItem Header="Timers">
            <StackPanel Orientation="Vertical" Margin="5, 5, 5, 5">
                <StackPanel Orientation="Vertical"  Margin="0, 0, 0, 8">
                    <Button Content="Create Timer Window" Click="CreateTimerWindow_Click"></Button>
                    <Separator/>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="85"/>
                            <ColumnDefinition Width="35"/>
                            <ColumnDefinition Width="90"/>
                            <ColumnDefinition Width="90"/>
                            <ColumnDefinition Width="0"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="Always On Top" VerticalAlignment="Center" FontWeight="Bold"  MaxWidth="125" Grid.Column="3"/>
                    </Grid>
                    <ListView ItemsSource="{Binding TimerWindows}">
                        <ListView.ItemTemplate>
                            <DataTemplate x:Name="TimerWindowsTemplate" DataType="local:TimerWindowOptions">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="85"/>
                                        <ColumnDefinition Width="35"/>
                                        <ColumnDefinition Width="90"/>
                                        <ColumnDefinition Width="30"/>
                                        <ColumnDefinition Width="60"/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Text="{Binding Title}" VerticalAlignment="Center" FontWeight="Bold"  MaxWidth="125" Grid.Column="0"/>
                                    <CheckBox IsChecked="{Binding AlwaysOnTop}" Margin="10,4,5,0" Click="TimerWindowAlwaysOnTop_Click" MinWidth="20" Grid.Column="3"/>
                                    <Button Click="CreateTimerWindow_Click" HorizontalAlignment="Right" DataContext="{Binding ID}" Margin="10,0,0,0" Content="Edit" Width="50" Grid.Column="4"/>
                                    <Button Click="DeleteTimerWindow_Click" DataContext="{Binding ID}" Margin="10,0,0,0" Grid.Column="5">
                                        <TextBlock Foreground="Red">X</TextBlock>
                                    </Button>
                                </Grid>
                            </DataTemplate>
                        </ListView.ItemTemplate>
                    </ListView>
                    <Separator/>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Window Opacity"  VerticalAlignment="Center"  FontWeight="Bold"  MinWidth="100"/>
                        <Slider Value="{Binding TimerWindowOpacity}" Minimum=".01" Maximum="1" SmallChange=".1" TickFrequency=".1" ValueChanged="SaveSettings" MinWidth="150"/>
                    </StackPanel>
                </StackPanel>
                <Separator></Separator>
                <Expander ExpandDirection="Down" IsExpanded="False" Header="Timer Colors" FontWeight="Bold">
                    <StackPanel Orientation="Vertical">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="125"/>
                                <ColumnDefinition Width="100"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition/>
                                <RowDefinition/>
                                <RowDefinition/>
                                <RowDefinition/>
                                <RowDefinition/>
                                <RowDefinition/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <TextBlock Grid.Row="0" Grid.Column="0" Text="Text Shadow" FontWeight="Bold" VerticalAlignment="Center"  MinWidth="100" ToolTip="Applies a very slight dropshadow of the opposite color."/>
                            <CheckBox x:Name="ShowTimerShadow" Click="TextShadow_Click" Grid.Row="0" Grid.Column="1" Margin="5"/>

                            <TextBlock Grid.Row="1" Grid.Column="0" Text="Text" FontWeight="Bold" VerticalAlignment="Center"  MinWidth="100"/>
                            <xctk:ColorPicker Name="SpellTimerNameColor"  Grid.Row="1" Grid.Column="1" SelectedColor="{Binding SpellTimerNameColor}" MinWidth="100" Margin="5,0,-93,0"/>

                            <TextBlock Grid.Row="2" Grid.Column="0" Text="Beneficial" FontWeight="Bold" VerticalAlignment="Center"  MinWidth="100"/>
                            <xctk:ColorPicker Name="BeneficialSpellTimerColor" Grid.Row="2" Grid.Column="1" SelectedColor="{Binding BeneficialSpellTimerColor}" FontWeight="Bold" MinWidth="100" Margin="5,5,-93,0"/>

                            <TextBlock Grid.Row="3" Grid.Column="0" Text="Detrimental" FontWeight="Bold" VerticalAlignment="Center"  MinWidth="100"/>
                            <xctk:ColorPicker Name="DetrimentalSpellTimerColor" Grid.Row="3" Grid.Column="1" SelectedColor="{Binding DetrimentalSpellTimerColor}" FontWeight="Bold" MinWidth="100" Margin="5,5,-93,0"/>

                            <TextBlock Grid.Row="4" Grid.Column="0" Text="Respawn" FontWeight="Bold" VerticalAlignment="Center"  MinWidth="100"/>
                            <xctk:ColorPicker Name="RespawnTimerColor" Grid.Row="4" Grid.Column="1" SelectedColor="{Binding RespawnTimerColor}" FontWeight="Bold" MinWidth="100" Margin="5,5,-93,0"/>

                            <TextBlock Grid.Row="5" Grid.Column="0" Text="Mod Rod" FontWeight="Bold" VerticalAlignment="Center"  MinWidth="100"/>
                            <xctk:ColorPicker Name="ModRodTimerColor" Grid.Row="5" Grid.Column="1" SelectedColor="{Binding ModRodTimerColor}" FontWeight="Bold" MinWidth="100" Margin="5,5,-93,0"/>

                            <TextBlock Grid.Row="6" Grid.Column="0" Text="Discipline" FontWeight="Bold" VerticalAlignment="Center"  MinWidth="100"/>
                            <xctk:ColorPicker Name="DisciplineTimerColor" Grid.Row="6" Grid.Column="1" SelectedColor="{Binding DisciplineTimerColor}" FontWeight="Bold" MinWidth="100" Margin="5,5,-93,0"/>

                            <TextBlock Grid.Row="7" Grid.Column="0" Text="Other" FontWeight="Bold" VerticalAlignment="Center"  MinWidth="100"/>
                            <xctk:ColorPicker Name="OtherTimerColor" Grid.Row="7" Grid.Column="1" SelectedColor="{Binding OtherTimerColor}" FontWeight="Bold" MinWidth="100" Margin="5,5,-93,0"/>
                        </Grid>
                    </StackPanel>
                </Expander>
                <Separator></Separator>
                <Expander ExpandDirection="Down" IsExpanded="False" Header="Spell Filters" FontWeight="Bold" ToolTip="This will filter what shows up on other players.">
                    <StackPanel Orientation="Horizontal">
                        <!--<TextBlock Text="Spell Filters"  FontWeight="Bold" MinWidth="100" />-->
                        <StackPanel Orientation="Vertical">
                            <ListBox IsEnabled="{Binding HasCharName}" ItemsSource="{Binding SelectedPlayerClasses}" MinWidth="150">
                                <ListBox.ItemTemplate>
                                    <DataTemplate>
                                        <CheckBox Content="{Binding TheText}" Tag="{Binding TheValue}" Unchecked="CheckBoxZone_Checked" Checked="CheckBoxZone_Checked" IsChecked="{Binding IsChecked}" Margin="0,5,0,0"/>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </ListBox>
                        </StackPanel>
                    </StackPanel>
                </Expander>
            </StackPanel>
        </TabItem>
        <TabItem Header="Map">
            <StackPanel Orientation="Vertical" Margin="5, 5, 5, 5">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Always on top" VerticalAlignment="Center"  FontWeight="Bold"  MinWidth="100"/>
                    <CheckBox IsChecked="{Binding MapAlwaysOnTop}" Click="SaveAlwaysOntopCheckBoxSettings" ></CheckBox>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Map Kill timers" ToolTip="Automatically add kill timers to the map. This is a per character setting" VerticalAlignment="Center"  FontWeight="Bold"  MinWidth="100"/>
                    <CheckBox IsChecked="{Binding ActivePlayer.Player.MapKillTimers}"></CheckBox>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Visible Tracking" ToolTip="Adjust the visibility of the Tracking Ring. This is a per character setting" VerticalAlignment="Center"  FontWeight="Bold"  MinWidth="100"/>
                    <CheckBox IsChecked="{Binding MapTrackingVisiblity}" Click="MapVisibleTracking_Click"></CheckBox>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Hide Small Labels" ToolTip="Hides the small labels on the map (Non-Zone). This is a per character setting" VerticalAlignment="Center"  FontWeight="Bold"  MinWidth="100"/>
                    <CheckBox IsChecked="{Binding HideSmallLabels}" Click="MapVisibleTracking_Click"></CheckBox>
                </StackPanel>
                <Separator/>
                <StackPanel Orientation="Horizontal" Margin="0,2,0,0">
                    <TextBlock Text="Location via Zeal" VerticalAlignment="Center" FontWeight="Bold" MinWidth="100">
                    </TextBlock>
                    <CheckBox IsChecked="{Binding ZealMap_AutoUpdate}" Click="SaveAlwaysOntopCheckBoxSettings" ></CheckBox>
                </StackPanel>
                <StackPanel Orientation="Horizontal" Margin="0,2,0,0">
                    <TextBlock Text="Zone via Zeal" VerticalAlignment="Center" FontWeight="Bold" MinWidth="100">
                    </TextBlock>
                    <CheckBox IsChecked="{Binding ZealZone_AutoUpdate}" Click="SaveAlwaysOntopCheckBoxSettings" ></CheckBox>
                </StackPanel>
                <Separator/>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Window Opacity" VerticalAlignment="Center"  FontWeight="Bold"  MinWidth="100"/>
                    <Slider Value="{Binding MapWindowOpacity}" Minimum=".01" Maximum="1" SmallChange=".1" TickFrequency=".1" ValueChanged="SaveSettings" MinWidth="150"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Label Multiplier" VerticalAlignment="Center"  FontWeight="Bold"  MinWidth="100"/>
                    <Slider Value="{Binding MapLabelMultiplier}" Minimum="1" Maximum="5" SmallChange=".1" TickFrequency=".1" ValueChanged="SaveSettings" MinWidth="150"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Location Share" VerticalAlignment="Center"  FontWeight="Bold" MinWidth="100"/>
                    <ComboBox SelectedItem="{Binding ActivePlayer.Player.MapLocationSharing}" ItemsSource="{Binding LocationShareOptions}" SelectionChanged="SaveSettings" MinWidth="150"></ComboBox>
                </StackPanel>
                <Separator/>
                <StackPanel Orientation="Horizontal">
                    <Button Click="ClearCachedMapsClicked" Content="Clear Cached Maps" MaxWidth="120" HorizontalAlignment="Left"/>
                    <Image Name="MapInfoIcon" Height="16" Width="16" HorizontalAlignment="Right" ToolTip="Clears the cached maps folder, and allows for loading new maps."></Image>
                </StackPanel>
            </StackPanel>
        </TabItem>
        <TabItem Header="Debug" Name="DebugTab">
            <StackPanel Orientation="Vertical" Margin="5, 5, 5, 5">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Debuff Sharing"  VerticalAlignment="Center"  FontWeight="Bold"  MinWidth="100"/>
                    <CheckBox IsChecked="{Binding ActivePlayer.Player.SpellDebuffShare}" Click="SaveSettings" MinWidth="75"></CheckBox>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Random Roll"  VerticalAlignment="Center"  FontWeight="Bold" MinWidth="100"/>
                    <Button Click="testRandomRolls" MinWidth="100">Test Random Rolls</Button>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="DPS"  VerticalAlignment="Center"  FontWeight="Bold" MinWidth="100"/>
                    <Button Click="testDPS" MinWidth="100">Add Test DPS</Button>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Spells"  VerticalAlignment="Center"  FontWeight="Bold" MinWidth="100"/>
                    <Button Click="testspellsclicked"  MinWidth="100">Add Test Spells</Button>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Map"  VerticalAlignment="Center"  FontWeight="Bold" MinWidth="100"/>
                    <Button Click="textmapclicked" MinWidth="100">Test Locations</Button>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Map"  VerticalAlignment="Center"  FontWeight="Bold" MinWidth="100"/>
                    <Button Click="testsignalrlocations" MinWidth="100">Test Signalr Locations</Button>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Run Log File"  VerticalAlignment="Center"  FontWeight="Bold" MinWidth="100"/>
                    <Button Click="selectLogFile">Select File</Button>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Log Push"  VerticalAlignment="Center"  FontWeight="Bold" MinWidth="100"/>
                    <TextBox x:Name="LogPushText" MinWidth="100"></TextBox>
                    <Button Click="logpush">Push</Button>
                </StackPanel>
            </StackPanel>
        </TabItem>
    </TabControl>
</local:BaseSaveStateWindow>
